<div class="page-header" id="banner">
  <div class="row">
    <div class="col-lg-8 col-md-7 col-sm-6">
      <h1>Example Biz Challenge</h1>
      <p class="lead">Code challenge for AngelLoop</p>
    </div>
  </div>
</div>

<!-- Table
================================================== -->
<div class="row-fluid">
  <div class="col-lg-12">
      <h2 id="orders" class="span5">Orders</h2>
    <%= link_to 'See JSON', orders_path, class: 'btn btn-primary pull-right' %>
    <table class="table table-striped table-hover ">
      <thead>
        <tr>
          <th>ID</th>
          <th>Order Date</th>
          <th>Customer ID</th>
          <th>Supplier ID</th>
          <th>Delivery Address</th>
          <th>Total Order Value</th>
          <th>Total Order Value (£)</th>
        </tr>
      </thead>
      <tbody>
        <% @orders.each do |order| %>
          <tr>
            <td><%= order.id %></td>
            <td><%= order.formatted_order_date %></td>
            <td><%= order.customer_id %></td>
            <td><%= order.supplier_id %></td>
            <td><%= order.delivery_address %></td>
            <td><%= order.currency %><% case order.currency when 'EUR'%>€<% when 'GBP' %>£<% else %>$<% end %><%= order.formatted_total_order_value %></td>
            <td>GBP£<%= @formatter.to_gbp_format(@fx.to_gbp(order.total_order_value,order.currency)) %></td>
          </tr>
        <% end %>
      </tbody>
    </table> 
  </div>
</div>

<!-- About
================================================== -->
<div class="row-fluid">
  <div class="col-lg-12">
    <h2 id="about" class="span5">About</h2>

    <h3>How to Read the Code</h3>

    <h4>The /data files</h4>

    <p>The files included in the data/ folder have been stored on the server under the /lib/assets/ folder. These .csv and .txt files were then parsed and turned into Order records in the setup of the webserver i.e. in the /db/seeds.rb file.</p>

    <h4>Script files</h4>

    <p>All scripts are stored under the '/app/services' directory. The scripts and their purpose are listed below:</p>
    <ul>
      <li>formatter.rb - responsible for formatting Currency (including the FX conversions) as well as Dates</li>
      <li>parser.rb - responsible for parsing data from .csv and .txt files</li>
    </ul>

    <h4>Tests</h4>
    <p>Rspec is used to run tests and as always the test suite can be found under the /spec directory.</p>

    <h4>Notes</h4>
    <p>Here are some thoughts I had on this project:</p>
    <ul>
      <li>The dates in the /data files were inconsistent. US dating follows MM/DD/YY format whilst EU & UK follow DD/MM/YY formats. I considered checking to see if either the first 2 date fields had a value higher than 12 (hence would be obvious it was a day value). However the problem with this approach is for dates with day values that can also be month values e.g. 03/04/2013 would cause such an approach to break. This is why I chose not to implement this method. I do put forward though that in future versions perhaps we can begin checking for a day value i.e. >12 and should both the first slot values be less than 12 then fall back to the default format used by that country. However this has not been implemented in this version.</li>
      <li>Currently the currency API is being queried every single time currency converted values are show (e.g. every time this page is loaded). In the final application these values should really be cached, otherwise the 1000 query limit on the API (http://openexchangerates.org/api/) is likely to quickly reach its limit.</li>
      <li>The test suite is by no means exhaustive, and the only components tested are /app/services</li>
    </ul>
  </div>
</div>